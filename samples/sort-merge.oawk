BEGIN {
  debug=1
  asciig0 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
}
{
  words[NR] = $0"\n";
}
END {
  while (1) {
    # "\n" is a marker of the end of an array
    numnl = 0;
    for (i = 1; i <= NR; i++) {
      if (words[i] ~ /\n$/)
        numnl ++;
    }
    if (debug)
      printf("num newline: %d\n", numnl);
    if (numnl == 1)
      break;

    #
    i0 = 1;
    while (1) {
      for (i1 = i0; i1 <= NR && words[i1] !~ /\n$/; i1 ++)
        ;

      i2 = i1 + 1;
      if (NR < i2)
        break;

      for (i3 = i2; i3 <= NR && words[i3] !~ /\n$/; i3 ++)
        ;

      # merge [i0..i1] and [i2..i3]
      if (debug)
        printf("  merge: [%d..%d] [%d..%d]\n", i0, i1, i2, i3);

      mi = 0;
      ia = i0;
      ib = i2;
      while (ia <= i1 && ib <= i3) {
        wa = words[ia];
        wb = words[ib];
        sa = length(wa);
        sb = length(wb);

        if (sa < sb)
          cmp = -1;
        else if (sa > sb)
          cmp = 1;
        else
          cmp = 0;

        for (ci = 1; ci < sa &&  ci < sb; ci++) {
          ca = substr(wa, ci, 1);
          cb = substr(wb, ci, 1);
          cai = index(asciig0, ca);
          cbi = index(asciig0, cb);
          if (cai == cbi)
            continue;
          else if (cai < cbi)
            cmp = -1;
          else if (cbi < cai)
            cmp = 1;

          break;
        }

        if (cmp == -1) {
          if (debug)
            printf("  pick #%d:%s\n", ia, wa);
          mi++;
          mgd[mi] = wa;
          ia++;
        } else if (cmp == 1) {
          if (debug)
            printf("  pick #%d:%s\n", ib, wb);
          mi++;
          mgd[mi] = wb;
          ib++;
        } else {
          if (debug) {
            printf("  pick #%d:%s\n", ia, wa);
            printf("  pick #%d:%s\n", ib, wb);
          }
          mi++;
          mgd[mi] = wa;
          ia++;
          mi++;
          mgd[mi] = wb;
          ib++;
        }
      }

      # append trailing data
      for (; ia <= i1; ia++) {
        if (0 < length(words[ia])) {
          if (debug)
            printf("  pick #%d:%s\n", ia, words[ia]);
          mi ++;
          mgd[mi] = words[ia];
        }
      }

      # append trailing data
      for (; ib <= i3; ib++) {
        if (0 < length(words[ib])) {
          if (debug)
            printf("  pick #%d:%s\n", ib, words[ib]);
          mi ++;
          mgd[mi] = words[ib];
        }
      }

      #for (j = 1; j < mi; j++) {
      #  printf("    mjd[%d] %s\n", j, mgd[j]);
      #}

      # write-back merged data
      for (j = 1; j < mi; j++) {
        if (mgd[j] ~ /\n$/)
          words[i0 + j - 1] = substr(mgd[j], 1, length(mgd[j]) - 1);
        else
          words[i0 + j - 1] = mgd[j];
      }
      words[i3] = mgd[mi];

      if (debug) {
        for (j = i0; j <= i3; j++) {
          printf("    words[%d] \"%s\"\n", j, words[j]);
        }
      }

      i0 = i3 + 1;
    }
  }

  if (words[NR] ~ /\n$/) {
    words[NR] = substr(words[NR], 1, length(words[NR]) - 1);
  }
  for (i = 1; i <= NR; i++) {
    print words[i];
  }
}
